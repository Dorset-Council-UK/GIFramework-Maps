@using GIFrameworkMaps.Data.ViewModels.Management
@using Microsoft.Extensions.Options
@model VersionEditViewModel
@inject IOptions<GIFrameworkMapsOptions> giFrameworkMapsOptions;
@{
    string appName = giFrameworkMapsOptions.Value.appName;
    ViewData["Title"] = $"Manage version users for '{Model.Version.Name}'";
    List<string> emailList = new List<string>();
    List<string> ContactableUsers = Model.Version.VersionContacts.Where(u => u.Enabled == true).Select(u => u.UserId).ToList();
    if (ContactableUsers.Count > 0)
    {
        var contactableUserList = Model.UserDetails.Where(u => ContactableUsers.Contains(u.Value.Id)).Select(u => u.Value).ToList();
        if (contactableUserList.Count > 0)
        {
            foreach (var user in contactableUserList)
            {
                foreach(string email in user.OtherMails)
                {
                    emailList.Add(email);
                }
            }
        }
    }
    string mailingList = string.Join(";",emailList);
}

<h1>@ViewData["Title"]</h1>

<a asp-action="Edit" asp-route-id="@Model.Version.Id">Back to version</a>

<p class ="lead">
    You can add a list of contacts for this version below and specify whether or not they should recieve messages relating to this version.
 </p>
<a href="@Url.Action("AddContact", "ManagementVersion",new {Id = Model.Version.Id})" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add a contact entry</a>
@if (Model.Version.VersionContacts.Any())
{

    <a href="mailto:@(mailingList)?subject=Re:%20@(appName)%20version%20=%20@(Model.Version.Name)" class="btn btn-primary float-end"><i class="bi bi-envelope-at"></i> Draft an email</a>
    @if (Model.Version.VersionContacts.Count > 0){
    <table id="userTable" class="table table-bordered table-striped mt-2">
        <thead>
            <tr>
                <th>Edit</th>
                <th>Display Name</th>
                <th>Email(s)</th>
                <th>Mailing List</th>
                <th>Remove</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Version.VersionContacts.OrderBy(u => u.DisplayName))
            {
                var currentUser = Model.UserDetails.FirstOrDefault(u => u.Key == user.UserId).Value;
                if (currentUser is not null)
                {
                    <tr>
                        <td>@Html.ActionLink("Edit entry", "EditContact",new {Id = Model.Version.Id, VersionContactId = user.VersionContactId})</td>
                        <td>@Html.ActionLink((!string.IsNullOrEmpty(user.DisplayName) ? user.DisplayName : currentUser.DisplayName), "Edit", "ManagementUser", new { id = currentUser.Id })</td>
                        <td>
                            @foreach (var mail in currentUser.OtherMails)
                            {
                                @mail

                                <br />
                            }
                        </td>
                        @if (user.Enabled)
                        {
                            <td><span class="badge bg-success">Yes</span></td>
                        } else
                        {
                            <td></td>
                        }
                        <td>@Html.ActionLink("Remove entry", "DeleteContact",new {Id = Model.Version.Id, VersionContactId = user.VersionContactId}, new {@Class="text-danger"})</td>
                    </tr>
                }
            }

        </tbody>
    </table>
    }
    else
    {
        <div class="alert alert-info mt-1">There are no users are associated with this version yet</div>
    }
}
else
{
    <div class="alert alert-info mt-1">There are no users are associated with this version yet</div>
}


