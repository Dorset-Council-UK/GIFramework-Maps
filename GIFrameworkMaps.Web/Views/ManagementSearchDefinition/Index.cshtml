@model List<GIFrameworkMaps.Data.Models.Search.SearchDefinition>
@{
    ViewData["Title"] = "Search definitions";

    // Working out the base edit URL once is significantly faster than doing it for each row
    var editUrl = Url.Action("Edit");
}

<partial name="ManagementPartials/BackToManagementHome" />

<h1>@ViewData["Title"]</h1>
<p class="lead">Create, edit and delete search definitions</p>

<a href="@Url.Action("CreateAPISearchDefinition")" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add new API search definition</a>
<a href="@Url.Action("CreateDatabaseSearchDefinition")" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add new database search definition</a>
<a href="@Url.Action("CreateLocalSearchDefinition")" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Add new local search definition</a>

@if (Model != null)
{
    <table id="searchDefinitionTable" class="table table-bordered table-striped mt-2">
        <thead>
            <tr>
                <th>ID</th><th>Name</th><th>Title</th>
            </tr>
        </thead>
        <tbody>
            @foreach (GIFrameworkMaps.Data.Models.Search.SearchDefinition searchDefinition in Model.OrderBy(a => a.Title))
            {
                <tr>
                    <td>@searchDefinition.Id</td>
                    <td><a href="@editUrl/@searchDefinition.Id">@searchDefinition.Name</a></td>
                    <td>@searchDefinition.Title</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning">No search definitions have been created yet</div>
}

@section Scripts {
    <script>
        const opts = {
            perPage: 50,
            perPageSelect: [10, 25, 50, 100, ["All", 0]],
            classes:
            {
                input: "form-control",
                top: "datatable-top px-0",
                selector: "form-select",
                paginationList: "pagination",
                paginationListItem: "page-item",
                paginationListItemLink: "page-link",
                active: 'active',
                disabled: 'disabled'
            }
        };
        const dataTable = new simpleDatatables.DataTable("#searchDefinitionTable", opts);
    </script>
}

            


