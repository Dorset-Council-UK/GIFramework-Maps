@model List<GIFrameworkMaps.Data.Models.Category>
@{
    ViewData["Title"] = "Layer Categories";

    // Working out the base edit URL once is significantly faster than doing it for each row
    var editUrl = Url.Action("Edit");
}

<partial name="ManagementPartials/BackToManagementLayers" />

<h1>@ViewData["Title"]</h1>
<p class="lead">Create, edit and delete layer categories</p>
<div><a asp-action="Create" class="btn btn-primary"><i class="bi bi-plus-circle"></i> Create new category</a></div>

@if (Model is not null)
{
    <table id="layerCategoryTable" class="table table-bordered table-striped mt-2">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>No. Layers</th>
                <th>Parent category</th>
            </tr>
        </thead>
        <tbody>
            @foreach (GIFrameworkMaps.Data.Models.Category category in Model.OrderBy(a => a.Name))
            {
                <tr>
                    <td>@category.Id</td>
                    <td><a href="@editUrl/@category.Id">@category.Name</a></td>
                    <td>@category.Layers.Count</td>
                    <td>
                        @if (category.ParentCategory is not null)
                        {
                            <a href="@editUrl/@category.ParentCategory.Id">@category.ParentCategory.Name</a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-warning">No categories have been created yet</div>
}

@section Scripts {
    <script>
        const opts = {
            perPage: 50,
            perPageSelect: [10, 25, 50, 100, ["All", 0]],
            classes:
            {
                input: "form-control",
                top: "datatable-top px-0",
                selector: "form-select",
                paginationList: "pagination",
                paginationListItem: "page-item",
                paginationListItemLink: "page-link",
                active: 'active',
                disabled: 'disabled'
            }
        };
        const dataTable = new simpleDatatables.DataTable("#layerCategoryTable", opts);
    </script>
}