// <auto-generated />
using System;
using GIFrameworkMaps.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GIFrameworkMaps.Data.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210317145641_AddPreviewImageURLToBasemaps")]
    partial class AddPreviewImageURLToBasemaps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("giframeworkmaps")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("GIFrameworkMaps.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Basemap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("LayerSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PreviewImageURL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LayerSourceId");

                    b.ToTable("Basemap");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Bound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("BottomLeftX")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BottomLeftY")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TopRightX")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TopRightY")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Bound");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Layer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("LayerSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("LayerSourceId");

                    b.ToTable("Layer");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.LayerSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("LayerSourceTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LayerSourceTypeId");

                    b.ToTable("LayerSource");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.LayerSourceOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("LayerSourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LayerSourceId");

                    b.ToTable("LayerSourceOption");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.LayerSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("LayerSourceType");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LogoURL")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PrimaryColour")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("BoundId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RedirectionURL")
                        .HasColumnType("text");

                    b.Property<bool>("RequireLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Slug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BoundId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.VersionBasemap", b =>
                {
                    b.Property<int>("BasemapId")
                        .HasColumnType("integer");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.HasKey("BasemapId", "VersionId");

                    b.HasIndex("VersionId");

                    b.ToTable("VersionBasemap");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.VersionLayer", b =>
                {
                    b.Property<int>("LayerId")
                        .HasColumnType("integer");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("LayerId", "VersionId");

                    b.HasIndex("VersionId");

                    b.ToTable("VersionLayer");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.VersionUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("VersionId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "VersionId");

                    b.HasIndex("VersionId");

                    b.ToTable("VersionUser");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Basemap", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.LayerSource", "LayerSource")
                        .WithMany()
                        .HasForeignKey("LayerSourceId");

                    b.Navigation("LayerSource");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Layer", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.LayerSource", "LayerSource")
                        .WithMany()
                        .HasForeignKey("LayerSourceId");

                    b.Navigation("LayerSource");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.LayerSource", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.LayerSourceType", "LayerSourceType")
                        .WithMany()
                        .HasForeignKey("LayerSourceTypeId");

                    b.Navigation("LayerSourceType");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.LayerSourceOption", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.LayerSource", null)
                        .WithMany("LayerSourceOptions")
                        .HasForeignKey("LayerSourceId");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Version", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.Bound", "Bound")
                        .WithMany()
                        .HasForeignKey("BoundId");

                    b.HasOne("GIFrameworkMaps.Data.Models.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.Navigation("Bound");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.VersionBasemap", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.Basemap", "Basemap")
                        .WithMany("VersionBasemaps")
                        .HasForeignKey("BasemapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GIFrameworkMaps.Data.Models.Version", null)
                        .WithMany("VersionBasemaps")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basemap");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.VersionLayer", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Models.Layer", "Layer")
                        .WithMany("VersionLayers")
                        .HasForeignKey("LayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GIFrameworkMaps.Data.Models.Version", null)
                        .WithMany("VersionLayers")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layer");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.VersionUser", b =>
                {
                    b.HasOne("GIFrameworkMaps.Data.Identity.ApplicationUser", "User")
                        .WithMany("VersionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GIFrameworkMaps.Data.Models.Version", "Version")
                        .WithMany("VersionUsers")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Version");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Identity.ApplicationUser", b =>
                {
                    b.Navigation("VersionUsers");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Basemap", b =>
                {
                    b.Navigation("VersionBasemaps");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Layer", b =>
                {
                    b.Navigation("VersionLayers");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.LayerSource", b =>
                {
                    b.Navigation("LayerSourceOptions");
                });

            modelBuilder.Entity("GIFrameworkMaps.Data.Models.Version", b =>
                {
                    b.Navigation("VersionBasemaps");

                    b.Navigation("VersionLayers");

                    b.Navigation("VersionUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
